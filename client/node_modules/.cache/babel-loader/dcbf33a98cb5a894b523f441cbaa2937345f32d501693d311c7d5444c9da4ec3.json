{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\demo3-22-9\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\n// src/components/ImageCaptureComponent.jsx\nimport React, { useRef, useEffect } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCaptureComponent = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (videoRef.current) {\n          // Assign the stream to the video element\n          videoRef.current.srcObject = stream;\n\n          // Play the video only when it's ready (loadedmetadata event)\n          videoRef.current.onloadedmetadata = () => {\n            try {\n              videoRef.current.play(); // Safely attempt to play the video\n            } catch (err) {\n              console.error('Error playing video:', err);\n            }\n          };\n        }\n      } catch (err) {\n        console.error('Error accessing webcam:', err);\n      }\n    };\n    startWebcam();\n    const captureImages = async () => {\n      // Capture screenshot of the entire page\n      const canvas = await html2canvas(document.body);\n      canvas.toBlob(async blob => {\n        if (blob) {\n          const screenshotFile = new File([blob], 'screenshot.png', {\n            type: 'image/png'\n          });\n\n          // Capture webcam image using hidden canvas\n          const canvasElement = canvasRef.current;\n          const video = videoRef.current;\n          if (video && canvasElement) {\n            // Set canvas dimensions to match the video feed\n            canvasElement.width = video.videoWidth;\n            canvasElement.height = video.videoHeight;\n            const ctx = canvasElement.getContext('2d');\n            ctx.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n            canvasElement.toBlob(async webcamBlob => {\n              if (webcamBlob) {\n                const webcamFile = new File([webcamBlob], 'webcam.png', {\n                  type: 'image/png'\n                });\n                await uploadImages(screenshotFile, webcamFile);\n              }\n            }, 'image/png'); // Capture as PNG\n          }\n        }\n      });\n    };\n    const intervalId = setInterval(captureImages, 3000);\n    return () => {\n      clearInterval(intervalId);\n      // Stop webcam stream on component unmount\n      if (videoRef.current && videoRef.current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        const tracks = stream.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Image capture in progress...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCaptureComponent, \"0gwqVvoOV2or9Ql4L8GH2BGn3hc=\");\n_c = ImageCaptureComponent;\nexport default ImageCaptureComponent;\nvar _c;\n$RefreshReg$(_c, \"ImageCaptureComponent\");","map":{"version":3,"names":["React","useRef","useEffect","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCaptureComponent","_s","videoRef","canvasRef","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","onloadedmetadata","play","err","console","error","captureImages","canvas","document","body","toBlob","blob","screenshotFile","File","type","canvasElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","webcamBlob","webcamFile","intervalId","setInterval","clearInterval","tracks","getTracks","forEach","track","stop","children","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/demo3-22-9/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["// src/components/ImageCaptureComponent.jsx\r\nimport React, { useRef, useEffect } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api';\r\n\r\nconst ImageCaptureComponent = () => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const startWebcam = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n\r\n        if (videoRef.current) {\r\n          // Assign the stream to the video element\r\n          videoRef.current.srcObject = stream;\r\n\r\n          // Play the video only when it's ready (loadedmetadata event)\r\n          videoRef.current.onloadedmetadata = () => {\r\n            try {\r\n              videoRef.current.play(); // Safely attempt to play the video\r\n            } catch (err) {\r\n              console.error('Error playing video:', err);\r\n            }\r\n          };\r\n        }\r\n      } catch (err) {\r\n        console.error('Error accessing webcam:', err);\r\n      }\r\n    };\r\n\r\n    startWebcam();\r\n\r\n    const captureImages = async () => {\r\n      // Capture screenshot of the entire page\r\n      const canvas = await html2canvas(document.body);\r\n      canvas.toBlob(async (blob) => {\r\n        if (blob) {\r\n          const screenshotFile = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n\r\n          // Capture webcam image using hidden canvas\r\n          const canvasElement = canvasRef.current;\r\n          const video = videoRef.current;\r\n\r\n          if (video && canvasElement) {\r\n            // Set canvas dimensions to match the video feed\r\n            canvasElement.width = video.videoWidth;\r\n            canvasElement.height = video.videoHeight;\r\n            const ctx = canvasElement.getContext('2d');\r\n            ctx.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\r\n\r\n            canvasElement.toBlob(async (webcamBlob) => {\r\n              if (webcamBlob) {\r\n                const webcamFile = new File([webcamBlob], 'webcam.png', { type: 'image/png' });\r\n                await uploadImages(screenshotFile, webcamFile);\r\n              }\r\n            }, 'image/png'); // Capture as PNG\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    const intervalId = setInterval(captureImages, 3000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      // Stop webcam stream on component unmount\r\n      if (videoRef.current && videoRef.current.srcObject) {\r\n        const stream = videoRef.current.srcObject;\r\n        const tracks = stream.getTracks();\r\n        tracks.forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Hidden Video Element */}\r\n      <video ref={videoRef} style={{ display: 'none' }} />\r\n      {/* Hidden Canvas Element */}\r\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\r\n      <h2>Image capture in progress...</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCaptureComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}