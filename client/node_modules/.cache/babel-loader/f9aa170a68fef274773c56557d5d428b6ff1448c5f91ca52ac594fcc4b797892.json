{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\n// src/components/ImageCaptureComponent.jsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const [sessionId, setSessionId] = useState(`session_${Date.now()}`);\n  const captureImage = async () => {\n    try {\n      // Capturing the screenshot\n      const screenshotCanvas = document.createElement('canvas');\n      screenshotCanvas.width = window.innerWidth;\n      screenshotCanvas.height = window.innerHeight;\n      const ctx = screenshotCanvas.getContext('2d');\n      ctx.drawImage(document.body, 0, 0);\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\n\n      // Capturing webcam using navigator.mediaDevices\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      await video.play();\n      const webcamCanvas = document.createElement('canvas');\n      webcamCanvas.width = video.videoWidth;\n      webcamCanvas.height = video.videoHeight;\n      const webcamCtx = webcamCanvas.getContext('2d');\n      webcamCtx.drawImage(video, 0, 0);\n      const webcamData = webcamCanvas.toDataURL('image/png');\n\n      // Sending both images to the backend\n      const formData = new FormData();\n      formData.append('sessionId', sessionId);\n      formData.append('screenshot', dataURItoBlob(screenshotData), 'screenshot.png');\n      formData.append('webcam', dataURItoBlob(webcamData), 'webcam.png');\n      await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('Images uploaded successfully');\n    } catch (err) {\n      console.error('Error capturing or uploading images:', err);\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      captureImage();\n    }, 3000);\n    return () => clearInterval(intervalId);\n  }, [sessionId]);\n  const dataURItoBlob = dataURI => {\n    const byteString = atob(dataURI.split(',')[1]);\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], {\n      type: mimeString\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Capturing Images...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n_s(ImageCapture, \"kV3cZpGI208CYaTDZHGDLPfuTNs=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ImageCapture","_s","sessionId","setSessionId","Date","now","captureImage","screenshotCanvas","document","createElement","width","window","innerWidth","height","innerHeight","ctx","getContext","drawImage","body","screenshotData","toDataURL","stream","navigator","mediaDevices","getUserMedia","video","srcObject","play","webcamCanvas","videoWidth","videoHeight","webcamCtx","webcamData","formData","FormData","append","dataURItoBlob","post","headers","console","log","err","error","intervalId","setInterval","clearInterval","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["// src/components/ImageCaptureComponent.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ImageCapture = () => {\r\n  const [sessionId, setSessionId] = useState(`session_${Date.now()}`);\r\n\r\n  const captureImage = async () => {\r\n    try {\r\n      // Capturing the screenshot\r\n      const screenshotCanvas = document.createElement('canvas');\r\n      screenshotCanvas.width = window.innerWidth;\r\n      screenshotCanvas.height = window.innerHeight;\r\n      const ctx = screenshotCanvas.getContext('2d');\r\n      ctx.drawImage(document.body, 0, 0);\r\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\r\n\r\n      // Capturing webcam using navigator.mediaDevices\r\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n      const video = document.createElement('video');\r\n      video.srcObject = stream;\r\n      await video.play();\r\n      \r\n      const webcamCanvas = document.createElement('canvas');\r\n      webcamCanvas.width = video.videoWidth;\r\n      webcamCanvas.height = video.videoHeight;\r\n      const webcamCtx = webcamCanvas.getContext('2d');\r\n      webcamCtx.drawImage(video, 0, 0);\r\n      const webcamData = webcamCanvas.toDataURL('image/png');\r\n\r\n      // Sending both images to the backend\r\n      const formData = new FormData();\r\n      formData.append('sessionId', sessionId);\r\n      formData.append('screenshot', dataURItoBlob(screenshotData), 'screenshot.png');\r\n      formData.append('webcam', dataURItoBlob(webcamData), 'webcam.png');\r\n\r\n      await axios.post('http://localhost:5000/upload', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n\r\n      console.log('Images uploaded successfully');\r\n    } catch (err) {\r\n      console.error('Error capturing or uploading images:', err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      captureImage();\r\n    }, 3000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [sessionId]);\r\n\r\n  const dataURItoBlob = (dataURI) => {\r\n    const byteString = atob(dataURI.split(',')[1]);\r\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n    const ab = new ArrayBuffer(byteString.length);\r\n    const ia = new Uint8Array(ab);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([ab], { type: mimeString });\r\n  };\r\n\r\n  return <div>Capturing Images...</div>;\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}