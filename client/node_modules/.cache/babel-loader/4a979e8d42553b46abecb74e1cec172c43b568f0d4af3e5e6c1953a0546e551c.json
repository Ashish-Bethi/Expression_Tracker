{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from './services/api'; // Import the uploadImages function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const videoRef = useRef(null);\n  const sessionId = new Date().toISOString(); // Use a timestamp as the session name\n\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        videoRef.current.srcObject = stream;\n\n        // Capture images every 3 seconds\n        const captureInterval = setInterval(() => {\n          captureAndUploadImages(stream);\n        }, 3000);\n        return () => {\n          clearInterval(captureInterval);\n          stream.getTracks().forEach(track => track.stop()); // Stop the webcam stream when component unmounts\n        };\n      } catch (error) {\n        console.error('Error accessing webcam: ', error);\n      }\n    };\n    startWebcam();\n  }, []);\n  const captureAndUploadImages = async stream => {\n    try {\n      // Capture webcam image\n      const webcamCanvas = document.createElement('canvas');\n      const video = videoRef.current;\n      webcamCanvas.width = video.videoWidth;\n      webcamCanvas.height = video.videoHeight;\n      const webcamCtx = webcamCanvas.getContext('2d');\n      webcamCtx.drawImage(video, 0, 0);\n      const webcamData = webcamCanvas.toDataURL('image/png');\n\n      // Use html2canvas to capture a screenshot of a specific element\n      const elementToCapture = document.body; // Change this to the specific element you want to capture\n      const screenshotCanvas = await html2canvas(elementToCapture);\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\n\n      // Upload images using the imported uploadImages function\n      await uploadImages(dataURItoBlob(screenshotData), dataURItoBlob(webcamData), sessionId);\n      console.log('Images uploaded successfully');\n    } catch (error) {\n      console.error('Error capturing or uploading images:', error);\n    }\n  };\n  const dataURItoBlob = dataURI => {\n    const byteString = atob(dataURI.split(',')[1]);\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], {\n      type: mimeString\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Capture Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Capturing screenshots and webcam images every 3 seconds...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCapture, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useRef","axios","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","_s","videoRef","sessionId","Date","toISOString","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","captureInterval","setInterval","captureAndUploadImages","clearInterval","getTracks","forEach","track","stop","error","console","webcamCanvas","document","createElement","width","videoWidth","height","videoHeight","webcamCtx","getContext","drawImage","webcamData","toDataURL","elementToCapture","body","screenshotCanvas","screenshotData","dataURItoBlob","log","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","style","display","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from './services/api'; // Import the uploadImages function\r\n\r\nconst ImageCapture = () => {\r\n  const videoRef = useRef(null);\r\n  const sessionId = new Date().toISOString(); // Use a timestamp as the session name\r\n\r\n  useEffect(() => {\r\n    const startWebcam = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        videoRef.current.srcObject = stream;\r\n\r\n        // Capture images every 3 seconds\r\n        const captureInterval = setInterval(() => {\r\n          captureAndUploadImages(stream);\r\n        }, 3000);\r\n\r\n        return () => {\r\n          clearInterval(captureInterval);\r\n          stream.getTracks().forEach(track => track.stop()); // Stop the webcam stream when component unmounts\r\n        };\r\n      } catch (error) {\r\n        console.error('Error accessing webcam: ', error);\r\n      }\r\n    };\r\n\r\n    startWebcam();\r\n  }, []);\r\n\r\n  const captureAndUploadImages = async (stream) => {\r\n    try {\r\n      // Capture webcam image\r\n      const webcamCanvas = document.createElement('canvas');\r\n      const video = videoRef.current;\r\n\r\n      webcamCanvas.width = video.videoWidth;\r\n      webcamCanvas.height = video.videoHeight;\r\n      const webcamCtx = webcamCanvas.getContext('2d');\r\n      webcamCtx.drawImage(video, 0, 0);\r\n\r\n      const webcamData = webcamCanvas.toDataURL('image/png');\r\n\r\n      // Use html2canvas to capture a screenshot of a specific element\r\n      const elementToCapture = document.body; // Change this to the specific element you want to capture\r\n      const screenshotCanvas = await html2canvas(elementToCapture);\r\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\r\n\r\n      // Upload images using the imported uploadImages function\r\n      await uploadImages(dataURItoBlob(screenshotData), dataURItoBlob(webcamData), sessionId);\r\n\r\n      console.log('Images uploaded successfully');\r\n    } catch (error) {\r\n      console.error('Error capturing or uploading images:', error);\r\n    }\r\n  };\r\n\r\n  const dataURItoBlob = (dataURI) => {\r\n    const byteString = atob(dataURI.split(',')[1]);\r\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n    const ab = new ArrayBuffer(byteString.length);\r\n    const ia = new Uint8Array(ab);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([ab], { type: mimeString });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Image Capture Component</h1>\r\n      <video ref={videoRef} autoPlay style={{ display: 'none' }} />\r\n      <p>Capturing screenshots and webcam images every 3 seconds...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}