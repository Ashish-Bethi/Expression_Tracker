{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const [sessionId, setSessionId] = useState(Date.now()); // Unique session ID\n  const [webcamStream, setWebcamStream] = useState(null);\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        setWebcamStream(stream);\n        captureImages(stream);\n      } catch (error) {\n        console.error(\"Error accessing webcam: \", error);\n      }\n    };\n    const captureImages = stream => {\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.play();\n      const captureInterval = setInterval(async () => {\n        // Capture screenshot using html2canvas\n        const screenshotCanvas = await html2canvas(document.body);\n        const screenshotBlob = await new Promise(resolve => screenshotCanvas.toBlob(resolve, 'image/png'));\n\n        // Capture webcam image from video stream\n        const webcamCanvas = document.createElement('canvas');\n        webcamCanvas.width = video.videoWidth;\n        webcamCanvas.height = video.videoHeight;\n        const webcamCtx = webcamCanvas.getContext('2d');\n        webcamCtx.drawImage(video, 0, 0, webcamCanvas.width, webcamCanvas.height);\n        const webcamBlob = await new Promise(resolve => webcamCanvas.toBlob(resolve, 'image/png'));\n\n        // Upload the images to the server\n        uploadImages(screenshotBlob, webcamBlob, sessionId);\n      }, 3000); // Every 3 seconds\n\n      return () => {\n        clearInterval(captureInterval);\n        video.pause();\n      };\n    };\n    startWebcam();\n    return () => {\n      if (webcamStream) {\n        webcamStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [sessionId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCapture, \"422h2CPLQ7kokYm+YnvagxQWN2o=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","_s","sessionId","setSessionId","Date","now","webcamStream","setWebcamStream","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","captureImages","error","console","document","createElement","srcObject","play","captureInterval","setInterval","screenshotCanvas","body","screenshotBlob","Promise","resolve","toBlob","webcamCanvas","width","videoWidth","height","videoHeight","webcamCtx","getContext","drawImage","webcamBlob","clearInterval","pause","getTracks","forEach","track","stop","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api';\r\n\r\nconst ImageCapture = () => {\r\n  const [sessionId, setSessionId] = useState(Date.now()); // Unique session ID\r\n  const [webcamStream, setWebcamStream] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const startWebcam = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        setWebcamStream(stream);\r\n        captureImages(stream);\r\n      } catch (error) {\r\n        console.error(\"Error accessing webcam: \", error);\r\n      }\r\n    };\r\n\r\n    const captureImages = (stream) => {\r\n      const video = document.createElement('video');\r\n      video.srcObject = stream;\r\n      video.play();\r\n\r\n      const captureInterval = setInterval(async () => {\r\n        // Capture screenshot using html2canvas\r\n        const screenshotCanvas = await html2canvas(document.body);\r\n        const screenshotBlob = await new Promise(resolve => screenshotCanvas.toBlob(resolve, 'image/png'));\r\n\r\n        // Capture webcam image from video stream\r\n        const webcamCanvas = document.createElement('canvas');\r\n        webcamCanvas.width = video.videoWidth;\r\n        webcamCanvas.height = video.videoHeight;\r\n        const webcamCtx = webcamCanvas.getContext('2d');\r\n        webcamCtx.drawImage(video, 0, 0, webcamCanvas.width, webcamCanvas.height);\r\n        const webcamBlob = await new Promise(resolve => webcamCanvas.toBlob(resolve, 'image/png'));\r\n\r\n        // Upload the images to the server\r\n        uploadImages(screenshotBlob, webcamBlob, sessionId);\r\n      }, 3000); // Every 3 seconds\r\n\r\n      return () => {\r\n        clearInterval(captureInterval);\r\n        video.pause();\r\n      };\r\n    };\r\n\r\n    startWebcam();\r\n\r\n    return () => {\r\n      if (webcamStream) {\r\n        webcamStream.getTracks().forEach(track => track.stop());\r\n      }\r\n    };\r\n  }, [sessionId]);\r\n\r\n  return (\r\n    <div>\r\n      <h2></h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}