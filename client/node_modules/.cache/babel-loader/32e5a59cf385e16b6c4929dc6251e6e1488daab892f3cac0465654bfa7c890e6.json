{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\demo3-22-9\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\n// // src/components/ImageCaptureComponent.jsx\n// import React, { useRef, useEffect } from 'react';\n// import html2canvas from 'html2canvas';\n// import Webcam from 'react-webcam';\n// import { uploadImages } from '../services/api';\n\n// const ImageCaptureComponent = () => {\n//   const webcamRef = useRef(null);\n\n//   useEffect(() => {\n//     const captureImages = async () => {\n//       // Capture the screenshot\n//       const canvas = await html2canvas(document.body);\n//       canvas.toBlob(async (blob) => {\n//         if (blob) {\n//           const screenshotFile = new File([blob], 'screenshot.png', { type: 'image/png' });\n//           // Capture the webcam image\n//           const imageSrc = webcamRef.current.getScreenshot();\n//           if (imageSrc) {\n//             const webcamBlob = dataURItoBlob(imageSrc);\n//             const webcamFile = new File([webcamBlob], 'webcam.jpg', { type: 'image/jpeg' });\n\n//             // Upload images\n//             await uploadImages(screenshotFile, webcamFile);\n//           }\n//         }\n//       });\n//     };\n\n//     const intervalId = setInterval(captureImages, 3000);\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const dataURItoBlob = (dataURI) => {\n//     const byteString = atob(dataURI.split(',')[1]);\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n//     const ab = new ArrayBuffer(byteString.length);\n//     const ia = new Uint8Array(ab);\n//     for (let i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//     }\n//     return new Blob([ab], { type: mimeString });\n//   };\n\n//   return (\n//     <div>\n//       <Webcam\n//         audio={false}\n//         ref={webcamRef}\n//         screenshotFormat=\"image/jpeg\"\n//         // width={320}\n//         // height={240}\n//         width={0} // Set to 0 to hide the feed\n//         height={0} // Set to 0 to hide the feed\n//       />\n//       <h2>Image capture in progress...</h2>\n//     </div>\n//   );\n// };\n\n// export default ImageCaptureComponent;\n\n// src/components/ImageCaptureComponent.jsx\nimport React, { useRef, useEffect } from 'react';\nimport html2canvas from 'html2canvas';\nimport Webcam from 'react-webcam';\nimport { uploadImages } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCaptureComponent = () => {\n  _s();\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const captureImages = async () => {\n      // Capture screenshot of the entire page\n      const canvas = await html2canvas(document.body);\n      canvas.toBlob(async blob => {\n        if (blob) {\n          const screenshotFile = new File([blob], 'screenshot.png', {\n            type: 'image/png'\n          });\n\n          // Capture webcam image using hidden canvas\n          const canvasElement = canvasRef.current;\n          const video = webcamRef.current.video;\n          if (video) {\n            // Set canvas dimensions to match the video feed\n            canvasElement.width = video.videoWidth;\n            canvasElement.height = video.videoHeight;\n            const ctx = canvasElement.getContext('2d');\n            ctx.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n            canvasElement.toBlob(async webcamBlob => {\n              if (webcamBlob) {\n                const webcamFile = new File([webcamBlob], 'webcam.png', {\n                  type: 'image/png'\n                });\n                await uploadImages(screenshotFile, webcamFile);\n              }\n            }, 'image/png'); // Capture as PNG\n          }\n        }\n      });\n    };\n    const intervalId = setInterval(captureImages, 3000);\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      audio: false,\n      ref: webcamRef,\n      screenshotFormat: \"image/png\",\n      style: {\n        display: 'none'\n      } // Hide the webcam feed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Image capture in progress...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCaptureComponent, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n_c = ImageCaptureComponent;\nexport default ImageCaptureComponent;\nvar _c;\n$RefreshReg$(_c, \"ImageCaptureComponent\");","map":{"version":3,"names":["React","useRef","useEffect","html2canvas","Webcam","uploadImages","jsxDEV","_jsxDEV","ImageCaptureComponent","_s","webcamRef","canvasRef","captureImages","canvas","document","body","toBlob","blob","screenshotFile","File","type","canvasElement","current","video","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","webcamBlob","webcamFile","intervalId","setInterval","clearInterval","children","audio","ref","screenshotFormat","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/demo3-22-9/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["// // src/components/ImageCaptureComponent.jsx\r\n// import React, { useRef, useEffect } from 'react';\r\n// import html2canvas from 'html2canvas';\r\n// import Webcam from 'react-webcam';\r\n// import { uploadImages } from '../services/api';\r\n\r\n// const ImageCaptureComponent = () => {\r\n//   const webcamRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const captureImages = async () => {\r\n//       // Capture the screenshot\r\n//       const canvas = await html2canvas(document.body);\r\n//       canvas.toBlob(async (blob) => {\r\n//         if (blob) {\r\n//           const screenshotFile = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n//           // Capture the webcam image\r\n//           const imageSrc = webcamRef.current.getScreenshot();\r\n//           if (imageSrc) {\r\n//             const webcamBlob = dataURItoBlob(imageSrc);\r\n//             const webcamFile = new File([webcamBlob], 'webcam.jpg', { type: 'image/jpeg' });\r\n\r\n//             // Upload images\r\n//             await uploadImages(screenshotFile, webcamFile);\r\n//           }\r\n//         }\r\n//       });\r\n//     };\r\n\r\n//     const intervalId = setInterval(captureImages, 3000);\r\n//     return () => clearInterval(intervalId);\r\n//   }, []);\r\n\r\n//   const dataURItoBlob = (dataURI) => {\r\n//     const byteString = atob(dataURI.split(',')[1]);\r\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n//     const ab = new ArrayBuffer(byteString.length);\r\n//     const ia = new Uint8Array(ab);\r\n//     for (let i = 0; i < byteString.length; i++) {\r\n//       ia[i] = byteString.charCodeAt(i);\r\n//     }\r\n//     return new Blob([ab], { type: mimeString });\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <Webcam\r\n//         audio={false}\r\n//         ref={webcamRef}\r\n//         screenshotFormat=\"image/jpeg\"\r\n//         // width={320}\r\n//         // height={240}\r\n//         width={0} // Set to 0 to hide the feed\r\n//         height={0} // Set to 0 to hide the feed\r\n//       />\r\n//       <h2>Image capture in progress...</h2>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ImageCaptureComponent;\r\n\r\n\r\n\r\n\r\n\r\n// src/components/ImageCaptureComponent.jsx\r\nimport React, { useRef, useEffect } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport Webcam from 'react-webcam';\r\nimport { uploadImages } from '../services/api';\r\n\r\nconst ImageCaptureComponent = () => {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const captureImages = async () => {\r\n      // Capture screenshot of the entire page\r\n      const canvas = await html2canvas(document.body);\r\n      canvas.toBlob(async (blob) => {\r\n        if (blob) {\r\n          const screenshotFile = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n          \r\n          // Capture webcam image using hidden canvas\r\n          const canvasElement = canvasRef.current;\r\n          const video = webcamRef.current.video;\r\n          \r\n          if (video) {\r\n            // Set canvas dimensions to match the video feed\r\n            canvasElement.width = video.videoWidth;\r\n            canvasElement.height = video.videoHeight;\r\n            const ctx = canvasElement.getContext('2d');\r\n            ctx.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\r\n            \r\n            canvasElement.toBlob(async (webcamBlob) => {\r\n              if (webcamBlob) {\r\n                const webcamFile = new File([webcamBlob], 'webcam.png', { type: 'image/png' });\r\n                await uploadImages(screenshotFile, webcamFile);\r\n              }\r\n            }, 'image/png'); // Capture as PNG\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    const intervalId = setInterval(captureImages, 3000);\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Hidden Webcam component */}\r\n      <Webcam\r\n        audio={false}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/png\"\r\n        style={{ display: 'none' }} // Hide the webcam feed\r\n      />\r\n      {/* Hidden Canvas to capture the webcam images */}\r\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\r\n      <h2>Image capture in progress...</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCaptureComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}