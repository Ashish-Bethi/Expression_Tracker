{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\n// src/components/ImageCaptureComponent.jsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const [sessionId, setSessionId] = useState(`session_${Date.now()}`);\n  const [videoStream, setVideoStream] = useState(null);\n\n  // Function to capture image from the webcam stream\n  const captureImage = async () => {\n    try {\n      // Capture a screenshot of the entire page\n      const screenshotCanvas = document.createElement('canvas');\n      screenshotCanvas.width = window.innerWidth;\n      screenshotCanvas.height = window.innerHeight;\n      const screenshotCtx = screenshotCanvas.getContext('2d');\n      screenshotCtx.drawImage(document.body, 0, 0, window.innerWidth, window.innerHeight);\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\n\n      // Capture webcam image\n      if (videoStream) {\n        const webcamCanvas = document.createElement('canvas');\n        const video = document.createElement('video');\n        video.srcObject = videoStream;\n        await video.play();\n        webcamCanvas.width = video.videoWidth;\n        webcamCanvas.height = video.videoHeight;\n        const webcamCtx = webcamCanvas.getContext('2d');\n        webcamCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n        const webcamData = webcamCanvas.toDataURL('image/png');\n\n        // Send both images to the backend\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        formData.append('screenshot', dataURItoBlob(screenshotData), 'screenshot.png');\n        formData.append('webcam', dataURItoBlob(webcamData), 'webcam.png');\n        await axios.post('http://localhost:5000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log('Images uploaded successfully');\n      }\n    } catch (error) {\n      console.error('Error capturing or uploading images:', error);\n    }\n  };\n\n  // Initialize webcam access on component mount\n  useEffect(() => {\n    const startVideoStream = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        setVideoStream(stream);\n      } catch (error) {\n        console.error('Error accessing webcam:', error);\n      }\n    };\n    startVideoStream();\n\n    // Capture images every 3 seconds\n    const intervalId = setInterval(() => {\n      captureImage();\n    }, 3000);\n\n    // Cleanup: Stop video stream and interval on component unmount\n    return () => {\n      clearInterval(intervalId);\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [videoStream]);\n\n  // Function to convert dataURI to Blob\n  const dataURItoBlob = dataURI => {\n    const byteString = atob(dataURI.split(',')[1]);\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], {\n      type: mimeString\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Capturing images in the background...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 10\n  }, this);\n};\n_s(ImageCapture, \"Zo/NZZPiGAfpXfjb0EJQYDw5jNQ=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ImageCapture","_s","sessionId","setSessionId","Date","now","videoStream","setVideoStream","captureImage","screenshotCanvas","document","createElement","width","window","innerWidth","height","innerHeight","screenshotCtx","getContext","drawImage","body","screenshotData","toDataURL","webcamCanvas","video","srcObject","play","videoWidth","videoHeight","webcamCtx","webcamData","formData","FormData","append","dataURItoBlob","post","headers","console","log","error","startVideoStream","stream","navigator","mediaDevices","getUserMedia","intervalId","setInterval","clearInterval","getTracks","forEach","track","stop","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["// src/components/ImageCaptureComponent.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ImageCapture = () => {\r\n  const [sessionId, setSessionId] = useState(`session_${Date.now()}`);\r\n  const [videoStream, setVideoStream] = useState(null);\r\n\r\n  // Function to capture image from the webcam stream\r\n  const captureImage = async () => {\r\n    try {\r\n      // Capture a screenshot of the entire page\r\n      const screenshotCanvas = document.createElement('canvas');\r\n      screenshotCanvas.width = window.innerWidth;\r\n      screenshotCanvas.height = window.innerHeight;\r\n      const screenshotCtx = screenshotCanvas.getContext('2d');\r\n      screenshotCtx.drawImage(document.body, 0, 0, window.innerWidth, window.innerHeight);\r\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\r\n\r\n      // Capture webcam image\r\n      if (videoStream) {\r\n        const webcamCanvas = document.createElement('canvas');\r\n        const video = document.createElement('video');\r\n        video.srcObject = videoStream;\r\n        await video.play();\r\n\r\n        webcamCanvas.width = video.videoWidth;\r\n        webcamCanvas.height = video.videoHeight;\r\n        const webcamCtx = webcamCanvas.getContext('2d');\r\n        webcamCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\r\n        const webcamData = webcamCanvas.toDataURL('image/png');\r\n\r\n        // Send both images to the backend\r\n        const formData = new FormData();\r\n        formData.append('sessionId', sessionId);\r\n        formData.append('screenshot', dataURItoBlob(screenshotData), 'screenshot.png');\r\n        formData.append('webcam', dataURItoBlob(webcamData), 'webcam.png');\r\n\r\n        await axios.post('http://localhost:5000/upload', formData, {\r\n          headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n\r\n        console.log('Images uploaded successfully');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error capturing or uploading images:', error);\r\n    }\r\n  };\r\n\r\n  // Initialize webcam access on component mount\r\n  useEffect(() => {\r\n    const startVideoStream = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        setVideoStream(stream);\r\n      } catch (error) {\r\n        console.error('Error accessing webcam:', error);\r\n      }\r\n    };\r\n\r\n    startVideoStream();\r\n\r\n    // Capture images every 3 seconds\r\n    const intervalId = setInterval(() => {\r\n      captureImage();\r\n    }, 3000);\r\n\r\n    // Cleanup: Stop video stream and interval on component unmount\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      if (videoStream) {\r\n        videoStream.getTracks().forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, [videoStream]);\r\n\r\n  // Function to convert dataURI to Blob\r\n  const dataURItoBlob = (dataURI) => {\r\n    const byteString = atob(dataURI.split(',')[1]);\r\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n    const ab = new ArrayBuffer(byteString.length);\r\n    const ia = new Uint8Array(ab);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([ab], { type: mimeString });\r\n  };\r\n\r\n  return <div>Capturing images in the background...</div>;\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}