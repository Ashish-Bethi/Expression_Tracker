{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '..services/api.js'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n\n  // Generate a unique sessionId each time a game starts\n  useEffect(() => {\n    const newSessionId = `session-${Date.now()}`;\n    setSessionId(newSessionId);\n    console.log('Generated sessionId:', newSessionId);\n  }, []);\n  const captureScreenshot = async () => {\n    const canvas = await html2canvas(document.body); // Adjust the capture area as needed\n    const screenshotBlob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n    return screenshotBlob;\n  };\n  const captureWebcamImage = async () => {\n    const video = document.createElement('video');\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      video.srcObject = stream;\n      await video.play();\n      const canvas = document.createElement('canvas');\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const context = canvas.getContext('2d');\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      const webcamBlob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n\n      // Stop the video stream\n      stream.getTracks().forEach(track => track.stop());\n      return webcamBlob;\n    } catch (error) {\n      console.error('Error capturing webcam image:', error);\n      return null;\n    }\n  };\n  const captureAndUploadImages = async () => {\n    try {\n      const screenshotBlob = await captureScreenshot();\n      const webcamBlob = await captureWebcamImage();\n      if (screenshotBlob && webcamBlob) {\n        await uploadImages(screenshotBlob, webcamBlob, sessionId);\n        console.log('Images uploaded successfully for session:', sessionId);\n      }\n    } catch (error) {\n      console.error('Error during image capture and upload:', error);\n    }\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      captureAndUploadImages();\n    }, 3000); // Capture every 3 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Image Capture Running...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 12\n  }, this);\n};\n_s(ImageCapture, \"zhgy4CpddregqEVDs8qrCzjj/S4=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","_s","sessionId","setSessionId","newSessionId","Date","now","console","log","captureScreenshot","canvas","document","body","screenshotBlob","Promise","resolve","toBlob","captureWebcamImage","video","createElement","stream","navigator","mediaDevices","getUserMedia","srcObject","play","width","videoWidth","height","videoHeight","context","getContext","drawImage","webcamBlob","getTracks","forEach","track","stop","error","captureAndUploadImages","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '..services/api.js'; // Ensure this path is correct\r\n\r\nconst ImageCapture = () => {\r\n    const [sessionId, setSessionId] = useState('');\r\n\r\n    // Generate a unique sessionId each time a game starts\r\n    useEffect(() => {\r\n        const newSessionId = `session-${Date.now()}`;\r\n        setSessionId(newSessionId);\r\n        console.log('Generated sessionId:', newSessionId);\r\n    }, []);\r\n\r\n    const captureScreenshot = async () => {\r\n        const canvas = await html2canvas(document.body); // Adjust the capture area as needed\r\n        const screenshotBlob = await new Promise((resolve) => canvas.toBlob(resolve, 'image/png'));\r\n        return screenshotBlob;\r\n    };\r\n\r\n    const captureWebcamImage = async () => {\r\n        const video = document.createElement('video');\r\n\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n            video.srcObject = stream;\r\n            await video.play();\r\n\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = video.videoWidth;\r\n            canvas.height = video.videoHeight;\r\n            const context = canvas.getContext('2d');\r\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            const webcamBlob = await new Promise((resolve) => canvas.toBlob(resolve, 'image/png'));\r\n\r\n            // Stop the video stream\r\n            stream.getTracks().forEach(track => track.stop());\r\n\r\n            return webcamBlob;\r\n        } catch (error) {\r\n            console.error('Error capturing webcam image:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const captureAndUploadImages = async () => {\r\n        try {\r\n            const screenshotBlob = await captureScreenshot();\r\n            const webcamBlob = await captureWebcamImage();\r\n\r\n            if (screenshotBlob && webcamBlob) {\r\n                await uploadImages(screenshotBlob, webcamBlob, sessionId);\r\n                console.log('Images uploaded successfully for session:', sessionId);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during image capture and upload:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            captureAndUploadImages();\r\n        }, 3000); // Capture every 3 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return <div>Image Capture Running...</div>;\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}