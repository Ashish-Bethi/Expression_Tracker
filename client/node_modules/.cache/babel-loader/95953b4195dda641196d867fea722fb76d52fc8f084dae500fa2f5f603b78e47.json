{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\GameComponent.jsx\",\n  _s = $RefreshSig$();\n// src/components/GameComponent.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './GameComponent.css';\nimport ImageCapture from './ImageCaptureComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shapes = ['circle', 'square', 'triangle'];\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction GameComponent() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [shuffledOptions, setShuffledOptions] = useState([]);\n  const [streak, setStreak] = useState(0);\n  const [isGameActive, setIsGameActive] = useState(true);\n  const [sessionId, setSessionId] = useState(null);\n  const username = localStorage.getItem('username');\n  const startSession = useCallback(async (forceNew = false) => {\n    // Check if a session already exists and we're not forcing a new one\n    if (sessionId && !forceNew) return sessionId;\n    try {\n      const response = await fetch(`http://localhost:5000/start-session?username=${username}&forceNew=${forceNew}`);\n      const data = await response.json();\n      setSessionId(data.sessionId);\n      return data.sessionId;\n    } catch (error) {\n      console.error('Error creating session:', error);\n      return null;\n    }\n  }, [username]);\n\n  // Use a single useEffect to handle initial session creation\n  useEffect(() => {\n    // Only create session when component mounts\n    startSession();\n  }, []); // Empty dependency array ensures this runs only once\n\n  useEffect(() => {\n    const newQuestions = Array(5).fill(null).map(() => {\n      const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\n      const randomCount = Math.floor(Math.random() * 5) + 1;\n      const sequence = Array(randomCount).fill(randomShape).concat(Array(9 - randomCount).fill(null).map(() => shapes[Math.floor(Math.random() * shapes.length)]));\n      const correctAnswer = sequence.filter(s => s === randomShape).length;\n      let options = [correctAnswer];\n      while (options.length < 4) {\n        const randomOption = Math.floor(Math.random() * 5) + 1;\n        if (!options.includes(randomOption)) {\n          options.push(randomOption);\n        }\n      }\n      return {\n        shape: randomShape,\n        sequence,\n        correctAnswer,\n        options: shuffleArray([...options])\n      };\n    });\n    setQuestions(newQuestions);\n  }, []);\n  useEffect(() => {\n    if (questions.length > 0 && currentQuestion < questions.length) {\n      setShuffledOptions(questions[currentQuestion].options);\n    }\n  }, [currentQuestion, questions]);\n  const handleAnswer = async answer => {\n    if (!isAnswered) {\n      setSelectedAnswer(answer);\n      setIsAnswered(true);\n      const correctAnswer = questions[currentQuestion].correctAnswer;\n      const correct = answer === correctAnswer;\n      setIsCorrect(correct);\n      if (correct) {\n        setScore(score + 1);\n        setStreak(streak + 1);\n      } else {\n        setStreak(0);\n      }\n    }\n  };\n  const nextQuestion = () => {\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setIsCorrect(null);\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setIsGameActive(false);\n    }\n  };\n  const restartGame = async () => {\n    // Create a new session when restarting\n    await startSession(true);\n\n    // Reset all other game states\n    setScore(0);\n    setCurrentQuestion(0);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setIsCorrect(null);\n    setStreak(0);\n    setIsGameActive(true);\n    const newQuestions = Array(5).fill(null).map(() => {\n      const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\n      const randomCount = Math.floor(Math.random() * 5) + 1;\n      const sequence = Array(randomCount).fill(randomShape).concat(Array(9 - randomCount).fill(null).map(() => shapes[Math.floor(Math.random() * shapes.length)]));\n      const correctAnswer = sequence.filter(s => s === randomShape).length;\n      let options = [correctAnswer];\n      while (options.length < 4) {\n        const randomOption = Math.floor(Math.random() * 5) + 1;\n        if (!options.includes(randomOption)) {\n          options.push(randomOption);\n        }\n      }\n      return {\n        shape: randomShape,\n        sequence,\n        correctAnswer,\n        options: shuffleArray([...options])\n      };\n    });\n    setQuestions(newQuestions);\n  };\n\n  // Rest of the component remains the same...\n  const getSmiley = () => {\n    if (!isAnswered) return '😊';\n    if (isCorrect) return streak > 1 ? '😁' : '😃';\n    return '😢';\n  };\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 38\n  }, this);\n  if (!isGameActive) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"game-title\",\n        children: \"Shape Counting Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"result\",\n          children: [\"Your score: \", score, \" / \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"restart-btn\",\n          onClick: restartGame,\n          \"aria-label\": \"Play Again\",\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this);\n  }\n  const {\n    shape,\n    sequence,\n    options\n  } = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [isGameActive && sessionId && /*#__PURE__*/_jsxDEV(ImageCapture, {\n      sessionId: sessionId,\n      isActive: isGameActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"How many \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"target-shape\",\n          children: [shape, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 22\n        }, this), \" are in the sequence?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shape-sequence\",\n        children: sequence.map((s, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `shape ${s} ${isCorrect === false ? 'sad' : ''}`,\n          \"aria-label\": `A ${s}`,\n          children: s && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"smiley\",\n            children: getSmiley()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: shuffledOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `option-btn ${isAnswered ? option === questions[currentQuestion].correctAnswer ? 'correct' : option === selectedAnswer ? 'incorrect' : '' : ''}`,\n          onClick: () => handleAnswer(option),\n          disabled: isAnswered,\n          \"aria-label\": `Select ${option}`,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), selectedAnswer !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"result\",\n          children: isCorrect ? 'Correct!' : `Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-btn\",\n          onClick: nextQuestion,\n          \"aria-label\": \"Next Question\",\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_s(GameComponent, \"GOccmTYGQUfmT1GuH+vG1BIvBNE=\");\n_c = GameComponent;\nexport default GameComponent;\nvar _c;\n$RefreshReg$(_c, \"GameComponent\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ImageCapture","jsxDEV","_jsxDEV","shapes","shuffleArray","array","i","length","j","Math","floor","random","GameComponent","_s","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","questions","setQuestions","isAnswered","setIsAnswered","isCorrect","setIsCorrect","shuffledOptions","setShuffledOptions","streak","setStreak","isGameActive","setIsGameActive","sessionId","setSessionId","username","localStorage","getItem","startSession","forceNew","response","fetch","data","json","error","console","newQuestions","Array","fill","map","randomShape","randomCount","sequence","concat","correctAnswer","filter","s","options","randomOption","includes","push","shape","handleAnswer","answer","correct","nextQuestion","restartGame","getSmiley","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","isActive","index","option","disabled","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/GameComponent.jsx"],"sourcesContent":["// src/components/GameComponent.jsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport './GameComponent.css';\r\nimport ImageCapture from './ImageCaptureComponent';\r\n\r\nconst shapes = ['circle', 'square', 'triangle'];\r\n\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction GameComponent() {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n  const [shuffledOptions, setShuffledOptions]  = useState([]);\r\n  const [streak, setStreak] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(true);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const username = localStorage.getItem('username');\r\n\r\n  const startSession = useCallback(async (forceNew = false) => {\r\n    // Check if a session already exists and we're not forcing a new one\r\n    if (sessionId && !forceNew) return sessionId;\r\n  \r\n    try {\r\n      const response = await fetch(`http://localhost:5000/start-session?username=${username}&forceNew=${forceNew}`);\r\n      const data = await response.json();\r\n      setSessionId(data.sessionId);\r\n      return data.sessionId;\r\n    } catch (error) {\r\n      console.error('Error creating session:', error);\r\n      return null;\r\n    }\r\n  }, [username]);\r\n\r\n  // Use a single useEffect to handle initial session creation\r\n  useEffect(() => {\r\n    // Only create session when component mounts\r\n    startSession();\r\n  }, []); // Empty dependency array ensures this runs only once\r\n\r\n  useEffect(() => {\r\n    const newQuestions = Array(5)\r\n      .fill(null)\r\n      .map(() => {\r\n        const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n        const randomCount = Math.floor(Math.random() * 5) + 1;\r\n        const sequence = Array(randomCount)\r\n          .fill(randomShape)\r\n          .concat(\r\n            Array(9 - randomCount).fill(null).map(() => \r\n              shapes[Math.floor(Math.random() * shapes.length)])\r\n          );\r\n\r\n        const correctAnswer = sequence.filter((s) => s === randomShape).length;\r\n        let options = [correctAnswer];\r\n        while (options.length < 4) {\r\n          const randomOption = Math.floor(Math.random() * 5) + 1;\r\n          if (!options.includes(randomOption)) {\r\n            options.push(randomOption);\r\n          }\r\n        }\r\n\r\n        return {\r\n          shape: randomShape,\r\n          sequence,\r\n          correctAnswer,\r\n          options: shuffleArray([...options])\r\n        };\r\n      });\r\n    setQuestions(newQuestions);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (questions.length > 0 && currentQuestion < questions.length) {\r\n      setShuffledOptions(questions[currentQuestion].options);\r\n    }\r\n  }, [currentQuestion, questions]);\r\n\r\n  const handleAnswer = async (answer) => {\r\n    if (!isAnswered) {\r\n      setSelectedAnswer(answer);\r\n      setIsAnswered(true);\r\n\r\n      const correctAnswer = questions[currentQuestion].correctAnswer;\r\n      const correct = answer === correctAnswer;\r\n      setIsCorrect(correct);\r\n\r\n      if (correct) {\r\n        setScore(score + 1);\r\n        setStreak(streak + 1);\r\n      } else {\r\n        setStreak(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    \r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      setIsGameActive(false);\r\n    }\r\n  };\r\n  \r\n  const restartGame = async () => {\r\n    // Create a new session when restarting\r\n    await startSession(true);\r\n\r\n    // Reset all other game states\r\n    setScore(0);\r\n    setCurrentQuestion(0);\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    setStreak(0);\r\n    setIsGameActive(true);\r\n    \r\n    const newQuestions = Array(5)\r\n      .fill(null)\r\n      .map(() => {\r\n        const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n        const randomCount = Math.floor(Math.random() * 5) + 1;\r\n        const sequence = Array(randomCount)\r\n          .fill(randomShape)\r\n          .concat(\r\n            Array(9 - randomCount).fill(null).map(() => \r\n              shapes[Math.floor(Math.random() * shapes.length)])\r\n          );\r\n\r\n        const correctAnswer = sequence.filter((s) => s === randomShape).length;\r\n        let options = [correctAnswer];\r\n        while (options.length < 4) {\r\n          const randomOption = Math.floor(Math.random() * 5) + 1;\r\n          if (!options.includes(randomOption)) {\r\n            options.push(randomOption);\r\n          }\r\n        }\r\n\r\n        return {\r\n          shape: randomShape,\r\n          sequence,\r\n          correctAnswer,\r\n          options: shuffleArray([...options])\r\n        };\r\n      });\r\n    setQuestions(newQuestions);\r\n  };\r\n\r\n  // Rest of the component remains the same...\r\n  const getSmiley = () => {\r\n    if (!isAnswered) return '😊';\r\n    if (isCorrect) return streak > 1 ? '😁' : '😃';\r\n    return '😢';\r\n  };\r\n\r\n  if (questions.length === 0) return <div>Loading...</div>;\r\n\r\n  if (!isGameActive) {\r\n    return (\r\n      <div className=\"app\">\r\n        <h1 className=\"game-title\">Shape Counting Game</h1>\r\n        <div className=\"score-container\">\r\n          <p className=\"result\">Your score: {score} / {questions.length}</p>\r\n          <button\r\n            className=\"restart-btn\"\r\n            onClick={restartGame}\r\n            aria-label=\"Play Again\"\r\n          >\r\n            Play Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { shape, sequence, options } = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {isGameActive && sessionId && (\r\n        <ImageCapture \r\n          sessionId={sessionId} \r\n          isActive={isGameActive} \r\n        />\r\n      )}\r\n      {/* Rest of the render remains the same... */}\r\n      <div className=\"game-container\">\r\n        <h3>How many <span className=\"target-shape\">{shape}s</span> are in the sequence?</h3>\r\n        <div className=\"shape-sequence\">\r\n          {sequence.map((s, index) => (\r\n            <div \r\n              key={index} \r\n              className={`shape ${s} ${isCorrect === false ? 'sad' : ''}`}\r\n              aria-label={`A ${s}`}\r\n            >\r\n              {s && <span className=\"smiley\">{getSmiley()}</span>}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"options-container\">\r\n          {shuffledOptions.map((option, index) => (\r\n            <button\r\n              key={index}\r\n              className={`option-btn ${\r\n                isAnswered\r\n                  ? option === questions[currentQuestion].correctAnswer\r\n                    ? 'correct'\r\n                    : option === selectedAnswer\r\n                    ? 'incorrect'\r\n                    : ''\r\n                  : ''\r\n              }`}\r\n              onClick={() => handleAnswer(option)}\r\n              disabled={isAnswered}\r\n              aria-label={`Select ${option}`}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        {selectedAnswer !== null && (\r\n          <div>\r\n            <p className=\"result\">\r\n              {isCorrect \r\n                ? 'Correct!' \r\n                : `Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`}\r\n            </p>\r\n            <button\r\n              className=\"next-btn\"\r\n              onClick={nextQuestion}\r\n              aria-label=\"Next Question\"\r\n            >\r\n              &rarr;\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}