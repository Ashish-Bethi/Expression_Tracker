{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\GameComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './GameComponent.css';\nimport ImageCapture from './ImageCaptureComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameComponent() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [shuffledOptions, setShuffledOptions] = useState([]);\n  const [streak, setStreak] = useState(0);\n  const [isGameActive, setIsGameActive] = useState(true);\n  const [sessionId, setSessionId] = useState(null);\n  const [isCreatingSession, setIsCreatingSession] = useState(false);\n\n  // Ref to track if session has been started\n  const sessionStartedRef = useRef(false);\n  const username = localStorage.getItem('username');\n  const startSession = useCallback(async () => {\n    // Prevent multiple session starts\n    if (sessionStartedRef.current || isCreatingSession) {\n      console.log('Session already in progress or being created');\n      return;\n    }\n    try {\n      setIsCreatingSession(true);\n      sessionStartedRef.current = true;\n      const response = await fetch(`http://localhost:5000/start-session?username=${username}`, {\n        method: 'GET',\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache',\n          'Expires': '0'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to start session');\n      }\n      const data = await response.json();\n      setSessionId(data.sessionId);\n    } catch (error) {\n      console.error('Error creating session:', error);\n      // Reset the ref on error to allow retry\n      sessionStartedRef.current = false;\n    } finally {\n      setIsCreatingSession(false);\n    }\n  }, [username]);\n\n  // Use useEffect with dependency on startSession to ensure stable reference\n  useEffect(() => {\n    // Only start session once\n    startSession();\n\n    // Cleanup function to reset session ref if component unmounts\n    return () => {\n      sessionStartedRef.current = false;\n    };\n  }, [startSession]);\n  useEffect(() => {\n    const newQuestions = Array(5).fill(null).map(() => {\n      const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\n      const randomCount = Math.floor(Math.random() * 5) + 1;\n      const sequence = Array(randomCount).fill(randomShape).concat(Array(9 - randomCount).fill(null).map(() => shapes[Math.floor(Math.random() * shapes.length)]));\n      const correctAnswer = sequence.filter(s => s === randomShape).length;\n      let options = [correctAnswer];\n      while (options.length < 4) {\n        const randomOption = Math.floor(Math.random() * 5) + 1;\n        if (!options.includes(randomOption)) {\n          options.push(randomOption);\n        }\n      }\n      return {\n        shape: randomShape,\n        sequence,\n        correctAnswer,\n        options: shuffleArray([...options])\n      };\n    });\n    setQuestions(newQuestions);\n  }, []);\n  useEffect(() => {\n    if (questions.length > 0 && currentQuestion < questions.length) {\n      setShuffledOptions(questions[currentQuestion].options);\n    }\n  }, [currentQuestion, questions]);\n  const handleAnswer = async answer => {\n    if (!isAnswered) {\n      setSelectedAnswer(answer);\n      setIsAnswered(true);\n      const correctAnswer = questions[currentQuestion].correctAnswer;\n      const correct = answer === correctAnswer;\n      setIsCorrect(correct);\n      if (correct) {\n        setScore(score + 1);\n        setStreak(streak + 1);\n      } else {\n        setStreak(0);\n      }\n    }\n  };\n  const nextQuestion = () => {\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setIsCorrect(null);\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      //endSession();\n      setIsGameActive(false);\n    }\n  };\n  const restartGame = async () => {\n    // Reset the session started flag\n    sessionStartedRef.current = false;\n    await startSession();\n\n    // Reset game state\n    setScore(0);\n    setCurrentQuestion(0);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setIsCorrect(null);\n    setStreak(0);\n    setIsGameActive(true);\n\n    // Regenerate questions (existing logic)\n    const newQuestions = Array(5).fill(null).map(() => {\n      const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\n      const randomCount = Math.floor(Math.random() * 5) + 1;\n      const sequence = Array(randomCount).fill(randomShape).concat(Array(9 - randomCount).fill(null).map(() => shapes[Math.floor(Math.random() * shapes.length)]));\n      const correctAnswer = sequence.filter(s => s === randomShape).length;\n      let options = [correctAnswer];\n      while (options.length < 4) {\n        const randomOption = Math.floor(Math.random() * 5) + 1;\n        if (!options.includes(randomOption)) {\n          options.push(randomOption);\n        }\n      }\n      return {\n        shape: randomShape,\n        sequence,\n        correctAnswer,\n        options: shuffleArray([...options])\n      };\n    });\n    setQuestions(newQuestions);\n  };\n  const getSmiley = () => {\n    if (!isAnswered) return '😊';\n    if (isCorrect) return streak > 1 ? '😁' : '😃';\n    return '😢';\n  };\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 38\n  }, this);\n\n  // Modify the restart button to be disabled during session creation\n  if (!isGameActive) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"game-title\",\n        children: \"Shape Counting Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"result\",\n          children: [\"Your score: \", score, \" / \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"restart-btn\",\n          onClick: restartGame,\n          disabled: isCreatingSession // Disable during session creation\n          ,\n          \"aria-label\": \"Play Again\",\n          children: isCreatingSession ? 'Creating Session...' : 'Play Again'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this);\n  }\n  const {\n    shape,\n    sequence,\n    options\n  } = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [isGameActive && sessionId && /*#__PURE__*/_jsxDEV(ImageCapture, {\n      sessionId: sessionId,\n      isActive: isGameActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"How many \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"target-shape\",\n          children: [shape, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 22\n        }, this), \" are in the sequence?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shape-sequence\",\n        children: sequence.map((s, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `shape ${s} ${isCorrect === false ? 'sad' : ''}`,\n          \"aria-label\": `A ${s}`,\n          children: s && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"smiley\",\n            children: getSmiley()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: shuffledOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `option-btn ${isAnswered ? option === questions[currentQuestion].correctAnswer ? 'correct' : option === selectedAnswer ? 'incorrect' : '' : ''}`,\n          onClick: () => handleAnswer(option),\n          disabled: isAnswered,\n          \"aria-label\": `Select ${option}`,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), selectedAnswer !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"result\",\n          children: isCorrect ? 'Correct!' : `Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-btn\",\n          onClick: nextQuestion,\n          \"aria-label\": \"Next Question\",\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n_s(GameComponent, \"hvcbQzp+z4AEPwrUpJrEnLIvPVE=\");\n_c = GameComponent;\nexport default GameComponent;\nvar _c;\n$RefreshReg$(_c, \"GameComponent\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","ImageCapture","jsxDEV","_jsxDEV","GameComponent","_s","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","questions","setQuestions","isAnswered","setIsAnswered","isCorrect","setIsCorrect","shuffledOptions","setShuffledOptions","streak","setStreak","isGameActive","setIsGameActive","sessionId","setSessionId","isCreatingSession","setIsCreatingSession","sessionStartedRef","username","localStorage","getItem","startSession","current","console","log","response","fetch","method","headers","ok","Error","data","json","error","newQuestions","Array","fill","map","randomShape","shapes","Math","floor","random","length","randomCount","sequence","concat","correctAnswer","filter","s","options","randomOption","includes","push","shape","shuffleArray","handleAnswer","answer","correct","nextQuestion","restartGame","getSmiley","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","isActive","index","option","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/GameComponent.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './GameComponent.css';\r\nimport ImageCapture from './ImageCaptureComponent';\r\n\r\nfunction GameComponent() {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n  const [shuffledOptions, setShuffledOptions] = useState([]);\r\n  const [streak, setStreak] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(true);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const [isCreatingSession, setIsCreatingSession] = useState(false);\r\n  \r\n  // Ref to track if session has been started\r\n  const sessionStartedRef = useRef(false);\r\n  \r\n  const username = localStorage.getItem('username');\r\n\r\n  const startSession = useCallback(async () => {\r\n    // Prevent multiple session starts\r\n    if (sessionStartedRef.current || isCreatingSession) {\r\n      console.log('Session already in progress or being created');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsCreatingSession(true);\r\n      sessionStartedRef.current = true;\r\n\r\n      const response = await fetch(`http://localhost:5000/start-session?username=${username}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Cache-Control': 'no-cache',\r\n          'Pragma': 'no-cache',\r\n          'Expires': '0'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to start session');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setSessionId(data.sessionId);\r\n    } catch (error) {\r\n      console.error('Error creating session:', error);\r\n      // Reset the ref on error to allow retry\r\n      sessionStartedRef.current = false;\r\n    } finally {\r\n      setIsCreatingSession(false);\r\n    }\r\n  }, [username]);\r\n\r\n  // Use useEffect with dependency on startSession to ensure stable reference\r\n  useEffect(() => {\r\n    // Only start session once\r\n    startSession();\r\n\r\n    // Cleanup function to reset session ref if component unmounts\r\n    return () => {\r\n      sessionStartedRef.current = false;\r\n    };\r\n  }, [startSession]);\r\n\r\n  useEffect(() => {\r\n    const newQuestions = Array(5)\r\n      .fill(null)\r\n      .map(() => {\r\n        const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n        const randomCount = Math.floor(Math.random() * 5) + 1;\r\n        const sequence = Array(randomCount)\r\n          .fill(randomShape)\r\n          .concat(\r\n            Array(9 - randomCount).fill(null).map(() => \r\n              shapes[Math.floor(Math.random() * shapes.length)])\r\n          );\r\n\r\n        const correctAnswer = sequence.filter((s) => s === randomShape).length;\r\n        let options = [correctAnswer];\r\n        while (options.length < 4) {\r\n          const randomOption = Math.floor(Math.random() * 5) + 1;\r\n          if (!options.includes(randomOption)) {\r\n            options.push(randomOption);\r\n          }\r\n        }\r\n\r\n        return {\r\n          shape: randomShape,\r\n          sequence,\r\n          correctAnswer,\r\n          options: shuffleArray([...options])\r\n        };\r\n      });\r\n    setQuestions(newQuestions);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (questions.length > 0 && currentQuestion < questions.length) {\r\n      setShuffledOptions(questions[currentQuestion].options);\r\n    }\r\n  }, [currentQuestion, questions]);\r\n\r\n  const handleAnswer = async (answer) => {\r\n    if (!isAnswered) {\r\n      setSelectedAnswer(answer);\r\n      setIsAnswered(true);\r\n\r\n      const correctAnswer = questions[currentQuestion].correctAnswer;\r\n      const correct = answer === correctAnswer;\r\n      setIsCorrect(correct);\r\n\r\n      if (correct) {\r\n        setScore(score + 1);\r\n        setStreak(streak + 1);\r\n      } else {\r\n        setStreak(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    \r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      //endSession();\r\n      setIsGameActive(false);\r\n    }\r\n  };\r\n\r\n\r\n  const restartGame = async () => {\r\n    // Reset the session started flag\r\n    sessionStartedRef.current = false;\r\n    \r\n    await startSession();\r\n    \r\n    // Reset game state\r\n    setScore(0);\r\n    setCurrentQuestion(0);\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    setStreak(0);\r\n    setIsGameActive(true);\r\n    \r\n    // Regenerate questions (existing logic)\r\n    const newQuestions = Array(5)\r\n      .fill(null)\r\n      .map(() => {\r\n        const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n        const randomCount = Math.floor(Math.random() * 5) + 1;\r\n        const sequence = Array(randomCount)\r\n          .fill(randomShape)\r\n          .concat(\r\n            Array(9 - randomCount).fill(null).map(() => \r\n              shapes[Math.floor(Math.random() * shapes.length)])\r\n          );\r\n\r\n        const correctAnswer = sequence.filter((s) => s === randomShape).length;\r\n        let options = [correctAnswer];\r\n        while (options.length < 4) {\r\n          const randomOption = Math.floor(Math.random() * 5) + 1;\r\n          if (!options.includes(randomOption)) {\r\n            options.push(randomOption);\r\n          }\r\n        }\r\n\r\n        return {\r\n          shape: randomShape,\r\n          sequence,\r\n          correctAnswer,\r\n          options: shuffleArray([...options])\r\n        };\r\n      });\r\n    setQuestions(newQuestions);\r\n  };\r\n  \r\n  const getSmiley = () => {\r\n    if (!isAnswered) return '😊';\r\n    if (isCorrect) return streak > 1 ? '😁' : '😃';\r\n    return '😢';\r\n  };\r\n\r\n  if (questions.length === 0) return <div>Loading...</div>;\r\n\r\n  // Modify the restart button to be disabled during session creation\r\n  if (!isGameActive) {\r\n    return (\r\n      <div className=\"app\">\r\n        <h1 className=\"game-title\">Shape Counting Game</h1>\r\n        <div className=\"score-container\">\r\n          <p className=\"result\">Your score: {score} / {questions.length}</p>\r\n          <button\r\n            className=\"restart-btn\"\r\n            onClick={restartGame}\r\n            disabled={isCreatingSession} // Disable during session creation\r\n            aria-label=\"Play Again\"\r\n          >\r\n            {isCreatingSession ? 'Creating Session...' : 'Play Again'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { shape, sequence, options } = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {isGameActive && sessionId && (\r\n        <ImageCapture \r\n          sessionId={sessionId} \r\n          isActive={isGameActive} \r\n          \r\n        />\r\n      )}\r\n      <div className=\"game-container\">\r\n        <h3>How many <span className=\"target-shape\">{shape}s</span> are in the sequence?</h3>\r\n        <div className=\"shape-sequence\">\r\n          {sequence.map((s, index) => (\r\n            <div \r\n              key={index} \r\n              className={`shape ${s} ${isCorrect === false ? 'sad' : ''}`}\r\n              aria-label={`A ${s}`}\r\n            >\r\n              {s && <span className=\"smiley\">{getSmiley()}</span>}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"options-container\">\r\n          {shuffledOptions.map((option, index) => (\r\n            <button\r\n              key={index}\r\n              className={`option-btn ${\r\n                isAnswered\r\n                  ? option === questions[currentQuestion].correctAnswer\r\n                    ? 'correct'\r\n                    : option === selectedAnswer\r\n                    ? 'incorrect'\r\n                    : ''\r\n                  : ''\r\n              }`}\r\n              onClick={() => handleAnswer(option)}\r\n              disabled={isAnswered}\r\n              aria-label={`Select ${option}`}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        {selectedAnswer !== null && (\r\n          <div>\r\n            <p className=\"result\">\r\n              {isCorrect \r\n                ? 'Correct!' \r\n                : `Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`}\r\n            </p>\r\n            <button\r\n              className=\"next-btn\"\r\n              onClick={nextQuestion}\r\n              aria-label=\"Next Question\"\r\n            >\r\n              &rarr;\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}