{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const [videoStream, setVideoStream] = useState(null);\n  const sessionId = new Date().toISOString(); // Using timestamp for session folder name\n\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        setVideoStream(stream);\n      } catch (error) {\n        console.error('Error accessing webcam: ', error);\n      }\n    };\n    startWebcam();\n    const captureInterval = setInterval(() => {\n      captureImage();\n    }, 3000);\n    return () => {\n      clearInterval(captureInterval);\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop()); // Stop the webcam stream\n      }\n    };\n  }, [videoStream]);\n  const dataURItoBlob = dataURI => {\n    const byteString = atob(dataURI.split(',')[1]);\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], {\n      type: mimeString\n    });\n  };\n  const captureImage = async () => {\n    try {\n      const screenshotCanvas = document.createElement('canvas');\n      screenshotCanvas.width = window.innerWidth;\n      screenshotCanvas.height = window.innerHeight;\n      const screenshotCtx = screenshotCanvas.getContext('2d');\n      screenshotCtx.drawImage(document.body, 0, 0, window.innerWidth, window.innerHeight);\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\n      if (videoStream) {\n        const webcamCanvas = document.createElement('canvas');\n        const video = document.createElement('video');\n        video.srcObject = videoStream;\n        await video.play();\n        webcamCanvas.width = video.videoWidth;\n        webcamCanvas.height = video.videoHeight;\n        const webcamCtx = webcamCanvas.getContext('2d');\n        webcamCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n        const webcamData = webcamCanvas.toDataURL('image/png');\n        const formData = new FormData();\n        formData.append('sessionId', sessionId); // Important: send sessionId to create session folders\n        formData.append('screenshot', dataURItoBlob(screenshotData), 'screenshot.png');\n        formData.append('webcam', dataURItoBlob(webcamData), 'webcam.png');\n        await axios.post('http://localhost:5000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log('Images uploaded successfully');\n      }\n    } catch (error) {\n      console.error('Error capturing or uploading images:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Capture Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Capturing screenshots and webcam images every 3 seconds...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCapture, \"G81Zkr9s6xIMldUsswX6oHcB4p0=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ImageCapture","_s","videoStream","setVideoStream","sessionId","Date","toISOString","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","error","console","captureInterval","setInterval","captureImage","clearInterval","getTracks","forEach","track","stop","dataURItoBlob","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","screenshotCanvas","document","createElement","width","window","innerWidth","height","innerHeight","screenshotCtx","getContext","drawImage","body","screenshotData","toDataURL","webcamCanvas","srcObject","play","videoWidth","videoHeight","webcamCtx","webcamData","formData","FormData","append","post","headers","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ImageCapture = () => {\r\n  const [videoStream, setVideoStream] = useState(null);\r\n  const sessionId = new Date().toISOString(); // Using timestamp for session folder name\r\n\r\n  useEffect(() => {\r\n    const startWebcam = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        setVideoStream(stream);\r\n      } catch (error) {\r\n        console.error('Error accessing webcam: ', error);\r\n      }\r\n    };\r\n\r\n    startWebcam();\r\n\r\n    const captureInterval = setInterval(() => {\r\n      captureImage();\r\n    }, 3000);\r\n\r\n    return () => {\r\n      clearInterval(captureInterval);\r\n      if (videoStream) {\r\n        videoStream.getTracks().forEach(track => track.stop()); // Stop the webcam stream\r\n      }\r\n    };\r\n  }, [videoStream]);\r\n\r\n  const dataURItoBlob = (dataURI) => {\r\n    const byteString = atob(dataURI.split(',')[1]);\r\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n    const ab = new ArrayBuffer(byteString.length);\r\n    const ia = new Uint8Array(ab);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([ab], { type: mimeString });\r\n  };\r\n\r\n  const captureImage = async () => {\r\n    try {\r\n      const screenshotCanvas = document.createElement('canvas');\r\n      screenshotCanvas.width = window.innerWidth;\r\n      screenshotCanvas.height = window.innerHeight;\r\n      const screenshotCtx = screenshotCanvas.getContext('2d');\r\n      screenshotCtx.drawImage(document.body, 0, 0, window.innerWidth, window.innerHeight);\r\n      const screenshotData = screenshotCanvas.toDataURL('image/png');\r\n\r\n      if (videoStream) {\r\n        const webcamCanvas = document.createElement('canvas');\r\n        const video = document.createElement('video');\r\n        video.srcObject = videoStream;\r\n        await video.play();\r\n\r\n        webcamCanvas.width = video.videoWidth;\r\n        webcamCanvas.height = video.videoHeight;\r\n        const webcamCtx = webcamCanvas.getContext('2d');\r\n        webcamCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\r\n        const webcamData = webcamCanvas.toDataURL('image/png');\r\n\r\n        const formData = new FormData();\r\n        formData.append('sessionId', sessionId); // Important: send sessionId to create session folders\r\n        formData.append('screenshot', dataURItoBlob(screenshotData), 'screenshot.png');\r\n        formData.append('webcam', dataURItoBlob(webcamData), 'webcam.png');\r\n\r\n        await axios.post('http://localhost:5000/upload', formData, {\r\n          headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n\r\n        console.log('Images uploaded successfully');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error capturing or uploading images:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Image Capture Component</h1>\r\n      <p>Capturing screenshots and webcam images every 3 seconds...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}